#!/usr/bin/python
# -*- coding: utf-8 -*-

# This version by Andrew Betts <andrew.betts@jasp.com>
#
# Original Copyright 2013-2014 Paul Wouters <paul@cypherpunks.ca>
#
# Based on the pymilter example code
# See the pymilter project at http://bmsi.com/python/milter.html
# based on Sendmail's milter API http://www.milter.org/milter_api/api.html

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

VERSION = '0.4'
ANCHOR = '/var/lib/unbound/root.anchor'
OPENPGPKEY = 61
KEYCACHE = '/someplacesomewhere'

import Milter
import StringIO
import time
import email
import sys
import os
import shutil
import argparse
from hashlib import sha224
import string
import random
import re
import binascii

from hkp import KeyServer
    
from socket import AF_INET6
from Milter.utils import parse_addr
if True:
    from multiprocessing import Process as Thread, Queue
else:
    from threading import Thread
    from Queue import Queue

logq = Queue(maxsize=4)

from syslog import syslog, openlog, LOG_MAIL
try:
    openlog('openpgpkey-milter', facility=LOG_MAIL)
except:
    # for python 2.6
    openlog('openpgpkey-milter', LOG_MAIL)

try:
    import setproctitle
    setproctitle.setproctitle("openpgpkey-milter")
except:
    syslog('openpgpkey-milter: failed to setproctitle - python-setproctitle missing?')

import unbound
ctx = unbound.ub_ctx()
ctx.resolvconf('/etc/resolv.conf')
try:
    if os.path.isfile(ANCHOR):
       ctx.add_ta_file(ANCHOR)
except:
    pass

spool_dir = '/var/spool/openpgpkey-milter'

import gnupg


class KeyAction(object):
    ENCRYPT = 1
    DONTENCRYPT = 2
    AMBIVALENT = 3

class KeyType(object):
    KEY = 1
    POLICY = 2


class myMilter(Milter.Base):

    def __init__(self):  # A new instance with each new connection.
        self.id = Milter.uniqueID()  # Integer incremented with each call.

  # each connection runs in its own thread and has its own myMilter
  # instance.  Python code must be thread safe.  This is trivial if only stuff
  # in myMilter instances is referenced.

    @Milter.noreply
    def connect(
        self,
        IPname,
        family,
        hostaddr,
        ):
        self.IP = hostaddr[0]
        self.port = hostaddr[1]
        if family == AF_INET6:
            self.flow = hostaddr[2]
            self.scope = hostaddr[3]
        else:
            self.flow = None
            self.scope = None
        self.IPname = IPname  # Name from a reverse IP lookup
        self.H = None
        self.fp = None
        self.receiver = self.getsymval('j')
        syslog('connect from %s at %s' % (IPname, hostaddr))
        return Milter.CONTINUE

  # #  def hello(self,hostname):

    def hello(self, heloname):

    # (self, 'example.com')

        self.H = heloname
        # syslog("HELO %s" % heloname)

        return Milter.CONTINUE

  # #  def envfrom(self,f,*str):

    def envfrom(self, mailfrom, *str):
        self.F = mailfrom
        self.R = []  # list of recipients
        self.fromparms = Milter.dictfromlist(str)  # ESMTP parms
        self.user = self.getsymval('{auth_authen}')  # authenticated user
        # syslog("mail from:", mailfrom, *str)

        self.fp = StringIO.StringIO()
        self.canon_from = '@'.join(parse_addr(mailfrom))
        self.fp.write('From %s %s\n' % (self.canon_from, time.ctime()))
        return Milter.CONTINUE

  # #  def envrcpt(self, to, *str):

    @Milter.noreply
    def envrcpt(self, to, *str):
        rcptinfo = (to, Milter.dictfromlist(str))
        self.R.append(rcptinfo)
        return Milter.CONTINUE

    @Milter.noreply
    def header(self, name, hval):
        self.fp.write('%s: %s\n' % (name, hval))  # add header to buffer
        return Milter.CONTINUE

    @Milter.noreply
    def eoh(self):
        self.fp.write('\n')  # terminate headers
        return Milter.CONTINUE

    @Milter.noreply
    def body(self, chunk):
        self.fp.write(chunk)
        return Milter.CONTINUE

    def stripper(self):
        data = ""
        # Return email with most headers 
        # stripped
        
        self.fp.seek(0);
        lines = self.fp.readlines()
       
    
        headerdone = False
        keepgoing = False;
        for line in lines: 
            if not headerdone:
                if ( line.startswith(" ") or line.startswith("\t") )  and keepgoing:
                    data = data + line
                else:
                    keepgoing = False
                        
                if line.lower().startswith("Content-type: ".lower()):
                    data = data + line
                    keepgoing = True
                if line.lower().startswith("Content-Transfer-Encoding: ".lower()):
                    data = data + line
                    keepgoing = True
                if line == "\n":
                    data = data + line
                    headerdone = True        
                if line == "\r":
                    data = data + line
                    headerdone = True        
            else:
                data = data + line

        return data
    

    def keytxtlookup(self,t,username,domainname,secure = True):
        ret =  self.keylookup(t,username,domainname,secure,unbound.RR_TYPE_TXT)
        return ret

    def keylookup(self,t,username,domainname,secure = True,class_type = OPENPGPKEY):
        
        if t == KeyType.KEY:
            idstr = "_openpgpkey"
        else:
            idstr = "_openpgpkeypolicy"

        if username=="":
            rfcnameprefix = "" # what's the point of a huge string for this
        else: 
            rfcnameprefix = sha224(username).hexdigest() + "."

        qname = '%s%s.%s' % (rfcnameprefix,idstr,domainname)
        (status,result) = ctx.resolve(qname, class_type,
                    unbound.RR_CLASS_IN)

        logmessage = ""
        if secure:
            logmessage = logmessage + ("Secure %s lookup %s@%s (%s) " % (class_type,username,domainname,qname) )
        else:
            logmessage = logmessage + ("Insecure %s Lookup %s@%s (%s) " % (class_type,username,domainname,qname) )


        if status != 0:
            logmessage = logmessage + "Failure"
            syslog(logmessage)
            return False
        if result.rcode_str == 'serv fail':
            logmessage = logmessage + "Serv Fail"
            syslog(logmessage)
            return False
        if secure and (not result.secure or result.bogus):
            logmessage = logmessage + "Not secure (wanted)"
            syslog(logmessage)
            return False
        if not result.havedata:
            logmessage = logmessage + "No data"
            syslog(logmessage)
            return False

        logmessage = logmessage + "(%d records)" % len(result.data.raw)
        syslog(logmessage)
        return result.data.raw



   
    def findapolicy(self,username,domainname,myhostname,secure = True):
        ret = self.keytxtlookup( KeyType.POLICY,username,domainname,secure)
        if ret:
            return ret;
        ret = self.keytxtlookup( KeyType.POLICY,"",domainname,secure)
        if ret:
            return ret;
        ret = self.keytxtlookup( KeyType.POLICY,username+"%"+domainname,myhostname,secure)
        if ret:
            return ret;
    
   
    def findakey(self,username,domainname,myhostname,secure = True):
        ret = self.keylookup( KeyType.KEY,username,domainname,secure)
        if ret:
            return ret;
        ret = self.keylookup( KeyType.KEY,"",domainname,secure)
        if ret:
            return ret;
        ret = self.keylookup( KeyType.KEY,username+"%"+domainname,myhostname,secure)
        if ret:
            return ret;
        
    def findatxtkey(self,username,domainname,myhostname,secure = False):
        ret = self.keytxtlookup( KeyType.KEY,username,domainname,secure)
        if ret:
            return ret;
        ret = self.keytxtlookup( KeyType.KEY,"",domainname,secure)
        if ret:
            return ret;
        ret = self.keytxtlookup( KeyType.KEY,username+"%"+domainname,myhostname,secure)
        if ret:
            return ret;
        

                
    def getkeyfromkeyserver(self,key_server,keyid):

        cache_file = perm_spool_dir + "/" + binascii.hexlify(key_server)+"_"+binascii.hexlify(keyid)
        keys = []
        if os.path.isfile(cache_file):
            with open (cache_file, "r") as myfile:
                data=myfile.read()
                syslog("Fetch from cache")
                keys = [data]
                myfile.close()
        else:
            try:
                serv = KeyServer(key_server)
                ret =  serv.search('0x' + keyid)
                keys = []
                for a  in ret:
                    keys = [a.key]
                    with open(cache_file, 'w') as myfile:
                        myfile.write(a.key)
                        myfile.close()
            except:
                syslog("Lookup failed")
        return keys

    def findakeyX(self,username,domainname,gpgin,secure=True):
            
            # just need this for error reporting
            recipient = username + "@" + domainname

            policies = self.findapolicy(username,domainname,self.receiver,secure)

            policy = ""
            if policies:
                for p in policies:
                    policy = policy + " " + p

            if "dontencrypt" in policy:
                 syslog("Policy says dontencrypt. Okay. On we go...")
                 return (Milter.CONTINUE,False,"")

            # pretty lame... TXT record "keyserver keyid"
            # still no idea how to properly parse TXT records..
            gotfromkeyserver = False
            if "keyserver" in policy:
                keyfetches = self.findatxtkey(username,domainname,self.receiver,secure)
                keyfetch = ""
                if keyfetches:
                    for p in keyfetches: 
                        keyfetch = keyfetch + " " + "".join([ " " if (c == '\"') else c for c in p ])

                keyfetch = "".join([ c if (c in string.ascii_letters or c in string.digits or c=="." or c==" ") else "" for c in p ])
                keyfetch =  keyfetch.strip()
                syslog(keyfetch)
                if " " in keyfetch:
                    (key_server,keyid) = keyfetch.split(" ",1)
                    keyid = keyid.strip()
                    key_server = "http://" + key_server.strip()
                    syslog ("Fetching Key [%s] from [%s]" % (keyid,key_server))
                    keys = self.getkeyfromkeyserver(key_server,keyid)
                   
                   
                    if len(keys) > 0:
                        syslog("Imported %s keys" % len(keys))
                        gotfromkeyserver = True
                    else:
                        syslog("No keys imported")
                    ## this isn't goood... 
                   
                else:
                    keys = []

            if not gotfromkeyserver:
                keys =  self.findakey(username,domainname,self.receiver,secure)

            if "encrypt" in policy and not keys:
                syslog("Policy says encrypt but we can't find a key. No go for you mister.")
                return (Milter.TEMPFAIL,False,"")
            if not keys:
                syslog("No keys. Policy doesn't care. Continue as usual.")
                return (Milter.CONTINUE,False,"")


            return (Milter.ACCEPT,keys,policy)

    def id_generator(self,size=6, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
        return ''.join(random.choice(chars) for _ in range(size))
    def eom(self):
        self.fp.seek(0)
        subject = 'none'


        self.addheader('X-OPENPGPKEY', 'Message passed unmodified' , 1)
        msg = email.message_from_file(self.fp)
        # msg is an email.message.Message
        # http://docs.python.org/release/2.7.6/library/email.message.html


        gpgdir = '%s/%s' % (spool_dir, self.id)
        if os.path.isdir(gpgdir):
            shutil.rmtree(gpgdir)
        os.mkdir(gpgdir)

        if not os.path.isdir(perm_spool_dir):
            os.mkdir(perm_spool_dir)

        # get recipients from email message
        tos = msg.get_all('to', [])
        ccs = msg.get_all('cc', [])
        all_recipients = email.utils.getaddresses(tos + ccs)
        recipients = []
        for entry in all_recipients:
            recipients.append(entry[1])

        gpg = gnupg.GPG(gnupghome=gpgdir)
        gpg.decode_errors="ignore"
        for recipient in recipients:
            # Local mail?.. no @ - what should we do?
            if not "@" in recipient:
               syslog('Malformed address or local mail. No @ in recipient. Let it go.')
               return Milter.CONTINUE
           
            (username, domainname) = recipient.split('@')


            (result,keys,policy) = self.findakeyX(username,domainname,gpg,param_secure)

            if result != Milter.ACCEPT:
                return result;

            
            # Finally, we have a key!
            for openpgpkey in keys:
                
                if False:
                    # I'm defining a special 1 byte entry to mean don't encrypt (Note: can use a policy record instead)
                    if len(openpgpkey)==1:
                        return Milter.CONTINUE
                # TODO: check failure to import
                import_result = gpg.import_keys(openpgpkey)
                
        

        # if we get here, all recipients had an valid openpgpkey record so we can encrypt the message
        # collect fingerprints needed to target message encryption
        fingerprints = []
        imported_keys = gpg.list_keys()

        if not imported_keys:
            # Empty key list - fail
            syslog("No keys (probably no recipients) - reject")
            return Milter.REJECT

        for ikey in imported_keys:
            syslog('Received %sKEY for %s: Key-ID:%s Fingerprint:%s'
                    % ("DNSSEC secured " if param_secure else "insecure ", ikey['uids'], ikey['keyid'], ikey['fingerprint']))
#                    % (recipient, ikey['keyid'], ikey['fingerprint'])) # only the last recipient? confusing. should map imported keys to email lookup
            fingerprints.append(ikey['fingerprint'])
        fpliststr = ','.join(fingerprints)

        # Not sure if this works at all
        if msg.has_key("X-OPENPGPKEY"):
            # Have we already seen this message?
            if any("encrypted" in s.lower() for s in msg.get_all("X-OPENPGPKEY",[])):
                syslog('Message already gone through X-OPENPGPKEY - letting it go unmodified')
                return Milter.CONTINUE
           
        if "encrypted" in msg.get_content_type().lower():  
            # already encrypted, let it go as is
            syslog('Message already encrypted - letting it go unmodified')
            return Milter.CONTINUE

        # Not checking for encrypted messages described as plain text
        # Users client can decide what's encrypted and what is merely a mention of something encrypted
        # (a string match on -----BEGIN PGP MESSAGE----- too weak )
        # Although clients need to do recursive decryption (which thunderbird doesn't do it appears)
        
        gpg = gnupg.GPG(gnupghome=gpgdir)
        gpg.decode_errors="ignore"
        syslog('Will encrypt message to fingerprints:%s' % fpliststr)

        if "alwayspgpmime" in policy:
            syslog("Policy says recipient likes PGP/MIME :D. Good.")
            pgpmime = True
        else:
            pgpmime = False # for now

        if not pgpmime and msg.is_multipart():
            pgpmime = True
            syslog("This is a multipart message. Must use PGP/MIME.")
    

        if pgpmime:
            self.fp.seek(0)
            enc_msg = gpg.encrypt(self.stripper(), fingerprints, always_trust=True)
        else:
            if 'subject' in msg:
                subject = msg['subject']
            msgstr = '''Subject:%s\n%s''' % (subject, self.stripper())
            enc_msg = gpg.encrypt(msgstr, fingerprints, always_trust=True)
    
        if enc_msg.data == '':
            # gpg binary and pythong wrapper is bad at giving us an error message
            syslog('Encryption to %s failed - failing message for retry later' % fpliststr)
            return Milter.TEMPFAIL

        self.chgheader('User-Agent', 1, 'dkim-openpgpkey')

        newsubject = ""
        if "keepsubject" in policy:
            if msg.has_key("Subject"):
                newsubject = msg['subject']
        else:
            newsubject = "[openpgpkey encrypted message]"

        if "debug" in policy:
            newsubject = newsubject + ' [' + fpliststr + ']'

        self.chgheader('Subject', 1, newsubject)
        self.chgheader('X-OPENPGPKEY', 1, 'Encrypted to key(s): %s ' % fpliststr)

        if pgpmime:
            # This needs to be set right for our new encrypted data
            self.chgheader("Content-Transfer-Encoding",1,"7bit");

            # A proper random boundary
            boundary = self.id_generator(35)

            self.chgheader('Content-type', 1, """multipart/encrypted;
     protocol="application/pgp-encrypted";
     boundary=""" + "\"" + boundary + "\"")


            # Replace original email with our encrypted version
            self.replacebody("""This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)

--""" + boundary + """
Content-Type: application/pgp-encrypted
Content-Description: PGP/MIME version identification

Version: 1

--""" + boundary + """
Content-Type: application/octet-stream; name="encrypted.asc"
Content-Description: OpenPGP encrypted message
Content-Disposition: inline; filename="encrypted.asc"

""" + enc_msg.data + """

--"""+boundary+"""--
""")
        else:
            # original behaviour
            self.replacebody( enc_msg.data)

            
        return Milter.ACCEPT

    def close(self):
        # always called, even when abort is called.  Clean up
        # any external resources here.
        gpgdir = '%s/%s' % (spool_dir, self.id)
        if os.path.isdir(gpgdir):
            shutil.rmtree(gpgdir)
        return Milter.CONTINUE

    def abort(self):
        # client disconnected prematurely
        return Milter.CONTINUE


  # # === Support Functions ===

def background():
    while True:
        t = logq.get()
        if not t:
            break
        (msg, mid, ts) = t
        mymsgs = ''
        for i in msg:
            mymsgs += '%s ' % i
        syslog('backgrounding [%d] ' % mid, mymsgs)

## ===

def main():
    global spool_dir
    global perm_spool_dir
    global param_secure
    global ctx
    parser = \
        argparse.ArgumentParser(description='OPENPGPKEY milter application'
                                , epilog='For bugs. see paul@nohats.ca')
    parser.add_argument('--anchor', '-a', action='store', default='',
                        help='location of the unbound DNSSEC trust anchor file (default /var/lib/unbound/root.anchor')
    parser.add_argument('--port', '-p', action='store', default='8890',
                        help='port on localhost to use (default 8890)')
    parser.add_argument('--pid', '-P', action='store', default='',
                        help='pidfile to create (default no pid file is created')
    parser.add_argument('--rrtype', '-r', action='store',
                        default='65280',
                        help='RRtype allocation (default private use 65280)')
    parser.add_argument('--spool', '-s', action='store',
                        default='/var/spool/openpgpkey-milter',
                        help='spool dir for tmp files (default /var/spool/openpgpkey-milter)')
    parser.add_argument('--timeout', '-t', action='store', default=600,
                        help='timeout (default 600)')
    parser.add_argument('--ignoreinsecure', '-i', action="store_true",
                        help='allow insecure DNS results')
    parser.add_argument('--version', action='store_true',
                        help='show version and exit')
    args = parser.parse_args()
    if args.version:
        print 'openpgpkey-milter version %s by Paul Wouters <paul@cypherpunks.ca>' % VERSION
        print '     options: --rrtype %s --spool %s  --port %s  --timeout %s --pid <pidfile>' % (args.rrtype, args.spool, args.port, args.timeout)
        sys.exit()

    if args.anchor:
        if not os.path.isfile(args.anchor):
           sys.exit("anchor file '%s' does not exist"%args.anchor)
        ctx.add_ta_file(args.anchor)

    socketname = 'inet:%s@127.0.0.1' % args.port
    spool_dir = args.spool
    perm_spool_dir = spool_dir + "/perm"
    param_secure = not args.ignoreinsecure

    bt = Thread(target=background)
    bt.start()

    # Register to have the Milter factory create instances of your class:
    Milter.factory = myMilter
    flags = Milter.CHGBODY + Milter.CHGHDRS + Milter.ADDHDRS
    flags += Milter.ADDRCPT
    flags += Milter.DELRCPT
    Milter.set_flags(flags)

    mypid = str(os.getpid())
    if args.pid:
       try:
            fp = open(args.pid,"w")
            fp.write(mypid)
            fp.close()
       except:
              sys.exit("Failed to write pid, aborted")

    syslog('starting daemon [%s] version %s on port %s at %s with timeout %s [%s]'
            % (mypid, VERSION, args.port, args.spool, args.timeout, "insecure mode" if args.ignoreinsecure else "secure mode"))
    sys.stdout.flush()
    Milter.runmilter('pythonfilter', socketname, args.timeout)
    logq.put(None)
    bt.join()
    syslog('shutting down daemon')

    if os.path.isfile(args.pid) and not os.path.islink(args.pid):
       os.unlink(args.pid)

if __name__ == '__main__':
    main()
